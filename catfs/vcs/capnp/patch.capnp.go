// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	capnp2 "floo/catfs/nodes/capnp"
)

// Change describes a single change
type Change capnp.Struct

// Change_TypeID is the unique identifier for the type Change.
const Change_TypeID = 0x9592300df48789af

func NewChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Change(st), err
}

func NewRootChange(s *capnp.Segment) (Change, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Change(st), err
}

func ReadRootChange(msg *capnp.Message) (Change, error) {
	root, err := msg.Root()
	return Change(root.Struct()), err
}

func (s Change) String() string {
	str, _ := text.Marshal(0x9592300df48789af, capnp.Struct(s))
	return str
}

func (s Change) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Change) DecodeFromPtr(p capnp.Ptr) Change {
	return Change(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Change) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Change) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Change) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Change) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Change) Mask() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Change) SetMask(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Change) Head() (capnp2.Node, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp2.Node(p.Struct()), err
}

func (s Change) HasHead() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Change) SetHead(v capnp2.Node) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHead sets the head field to a newly
// allocated capnp2.Node struct, preferring placement in s's segment.
func (s Change) NewHead() (capnp2.Node, error) {
	ss, err := capnp2.NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return capnp2.Node{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Change) Next() (capnp2.Node, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp2.Node(p.Struct()), err
}

func (s Change) HasNext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Change) SetNext(v capnp2.Node) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewNext sets the next field to a newly
// allocated capnp2.Node struct, preferring placement in s's segment.
func (s Change) NewNext() (capnp2.Node, error) {
	ss, err := capnp2.NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return capnp2.Node{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Change) Curr() (capnp2.Node, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp2.Node(p.Struct()), err
}

func (s Change) HasCurr() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Change) SetCurr(v capnp2.Node) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewCurr sets the curr field to a newly
// allocated capnp2.Node struct, preferring placement in s's segment.
func (s Change) NewCurr() (capnp2.Node, error) {
	ss, err := capnp2.NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return capnp2.Node{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Change) MovedTo() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Change) HasMovedTo() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Change) MovedToBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Change) SetMovedTo(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Change) WasPreviouslyAt() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Change) HasWasPreviouslyAt() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Change) WasPreviouslyAtBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Change) SetWasPreviouslyAt(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// Change_List is a list of Change.
type Change_List = capnp.StructList[Change]

// NewChange creates a new list of Change.
func NewChange_List(s *capnp.Segment, sz int32) (Change_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[Change](l), err
}

// Change_Future is a wrapper for a Change promised by a client call.
type Change_Future struct{ *capnp.Future }

func (f Change_Future) Struct() (Change, error) {
	p, err := f.Future.Ptr()
	return Change(p.Struct()), err
}
func (p Change_Future) Head() capnp2.Node_Future {
	return capnp2.Node_Future{Future: p.Future.Field(0, nil)}
}
func (p Change_Future) Next() capnp2.Node_Future {
	return capnp2.Node_Future{Future: p.Future.Field(1, nil)}
}
func (p Change_Future) Curr() capnp2.Node_Future {
	return capnp2.Node_Future{Future: p.Future.Field(2, nil)}
}

// Patch contains a single change
type Patch capnp.Struct

// Patch_TypeID is the unique identifier for the type Patch.
const Patch_TypeID = 0x927c7336e3054805

func NewPatch(s *capnp.Segment) (Patch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Patch(st), err
}

func NewRootPatch(s *capnp.Segment) (Patch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Patch(st), err
}

func ReadRootPatch(msg *capnp.Message) (Patch, error) {
	root, err := msg.Root()
	return Patch(root.Struct()), err
}

func (s Patch) String() string {
	str, _ := text.Marshal(0x927c7336e3054805, capnp.Struct(s))
	return str
}

func (s Patch) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Patch) DecodeFromPtr(p capnp.Ptr) Patch {
	return Patch(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Patch) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Patch) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Patch) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Patch) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Patch) FromIndex() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Patch) SetFromIndex(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Patch) CurrIndex() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Patch) SetCurrIndex(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Patch) Changes() (Change_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Change_List(p.List()), err
}

func (s Patch) HasChanges() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Patch) SetChanges(v Change_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewChanges sets the changes field to a newly
// allocated Change_List, preferring placement in s's segment.
func (s Patch) NewChanges(n int32) (Change_List, error) {
	l, err := NewChange_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Change_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Patch_List is a list of Patch.
type Patch_List = capnp.StructList[Patch]

// NewPatch creates a new list of Patch.
func NewPatch_List(s *capnp.Segment, sz int32) (Patch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Patch](l), err
}

// Patch_Future is a wrapper for a Patch promised by a client call.
type Patch_Future struct{ *capnp.Future }

func (f Patch_Future) Struct() (Patch, error) {
	p, err := f.Future.Ptr()
	return Patch(p.Struct()), err
}

const schema_b943b54bf1683782 = "x\xdat\x90\xc1k\x13A\x1c\x85\xdf\xfb\xcd\xae\xa1\x92" +
	"\x9a,\xc9\xc1\x83\xd0\xf5\xa8\x07\xd3RP\x08Bm\xab" +
	"\xa0\xa8\xb0#\x8a\x9e\xc4u\xb3i\x82\xc9n\xc8\xa6\xb1" +
	"\x01%\xd0\x8b(\x14\xa4*((V\xa8b\xa1R/" +
	"\x82=x\xf4_\xf0\x1f\xe8\xd1\x93\xe0\xa9\x97\x95Il" +
	"-Zo\xbb\xdf|0\xf3\xbd\xf1[<cM\x8c\x96" +
	"l\x88>m\x1fH\xed\xf3\xf6\xd6\xc9\xe4\xde2\xf4Q" +
	"J\xbax\xaa\xf6\xe3\xe2\xa7\xd9M\xd8\xcc\x00\x93\xf7\xa5" +
	"\xcc\xc2\x92d\x0aK2V\xd8\x94\x0d0\xddx\xf8\xe0" +
	"\xe7\xe8\xf8\xf23\xe3s\x8fo\x1b\xbf\xaefX\xe8\xa9" +
	"L\xa1\xa7\xc6&\xd7\xd4u\xe2qZm\xc4q)\xf0" +
	";\xaa\x9a\x94\xbaAR\x0a\xfcV\xd4*\xb5\xfcNP" +
	";1\xf8\x9e*{\xe6\xc7#\xb5EIo>y\xad" +
	"\xbf|{\xf4\x15\xda\x12N\x1f!\xb3\x80\xc3\xedt " +
	"\xb9A,Q\xc7\xafG\x89\xeb\xbbI=\x9ak\x84\xee" +
	"TP\xf3\xa3\xb9\x10\xd0Ye\x01\x16\x01\xe7\xdc\x15@" +
	"\x9fU\xd4\x9e\xd0!\x8b4\xf0\xb2\x81\x97\x14\xf5\x0d!" +
	"\xa5H\x01\x9ck3\x80\xf6\x14uC\x98V\xdbq\xf3" +
	"BT\x09\xc1\x05\xda\x10\xda`\x1a\xcc\xb7\xdb\x7f\xb1\xfe" +
	"\xf0\xc2\x84\x87@O\x91\xf9?\xa3\x80\x06\xee6[\xff" +
	"k.\xcf\x0e\xdf\xbc\x7f\xb4;\x88\x9e\xe0A\xa6C\xcf" +
	"\xad\xa80\x09\xda\xf5\xdb\xe1\x9e\xee\xdf\xd9\xd4\x87w\xb3" +
	"_\x1c\x07\xf4SE\xbd\"\xdc\xa9~e\xd8sE\xbd" +
	"*t\x84\xc3\xec7\x06\xbeT\xd4\xef\x85\x8e\x92\"\x15" +
	"\xe0\xbc5pEQ\xaf\x0b\x1dK\x15i\x01\xce\x9a\x19" +
	"hUQ\x7f\x14:\xb6U\xa4\x0d8\x1f\x16\x01\xbd\xae" +
	"\xa8?\x0bsM?\xb9\xc3\x11\x08G\xc0\\-\xf4+" +
	"\xcc\xa7[\xdb\xd5V\xff\xfb\xb1wf\x90<\x98\x8b\xc2" +
	"\x85\xce>\xd8\x8c\xfb/\xee7\xe3nX\xb9\x1a3\x0b" +
	"a\x16L\xef\xfa\x89\xd7\x0e\xbbu\xc6\xf3I\xa37\xdd" +
	"\xc1\xce\xc9\xaf\x00\x00\x00\xff\xff\xf6\xbf\xb5\x8f"

func init() {
	schemas.Register(schema_b943b54bf1683782,
		0x927c7336e3054805,
		0x9592300df48789af)
}
